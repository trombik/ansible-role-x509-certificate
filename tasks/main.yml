---
# tasks file for ansible-role-x509_certificate

- name: "Include variables from {{ ansible_os_family }}.yml"
  include_vars: "{{ ansible_os_family }}.yml"

- name: "Include tasks install-{{ ansible_os_family }}.yml"
  include_tasks: "install-{{ ansible_os_family }}.yml"

- set_fact:
    x509_certificate_present: "{{ x509_certificate | selectattr('state', 'match', '^present$') | list }}"
  no_log: "{% if x509_certificate_debug_log %}no{% else %}yes{% endif %}"

- set_fact:
    x509_certificate_absent: "{{ x509_certificate | selectattr('state', 'match', '^absent$') | list }}"
  no_log: "{% if x509_certificate_debug_log %}no{% else %}yes{% endif %}"

- name: Create x509_certificate_dir
  file:
    path: "{{ x509_certificate_dir }}"
    mode: 0755
    owner: "{{ x509_certificate_default_owner }}"
    group: "{{ x509_certificate_default_group }}"
    state: directory
  no_log: "{% if x509_certificate_debug_log %}no{% else %}yes{% endif %}"

- name: Create directories for pub keys
  file:
    path: "{{ item.public.path | dirname }}"
    mode: 0755
    state: directory
  no_log: "{% if x509_certificate_debug_log %}no{% else %}yes{% endif %}"
  with_items: "{{ x509_certificate_present }}"
  when:
    - "'path' in item.public"
    - item.public.path | length > 0

- name: Create directories for secret keys
  file:
    path: "{{ item.secret.path | dirname }}"
    mode: 0755
    state: directory
  no_log: "{% if x509_certificate_debug_log %}no{% else %}yes{% endif %}"
  with_items: "{{ x509_certificate_present }}"
  when:
    - "'secret' in item"
    - "'path' in item.secret"
    - item.secret.path | length > 0

- name: Create public keys
  template:
    src: pem.j2
    dest: "{{ item.public.path | default(x509_certificate_dir + '/' + item.name + '.pem') }}"
    owner: "{{ item.public.owner | default(x509_certificate_default_owner) }}"
    group: "{{ item.public.group | default(x509_certificate_default_group) }}"
    mode: "{{ item.public.mode | default(0444) }}"
    validate: "{{ x509_certificate_validate_command_public[x509_certificate_validate_command] }}"
  no_log: "{% if x509_certificate_debug_log %}no{% else %}yes{% endif %}"
  with_items: "{{ x509_certificate_present }}"
  when:
    - "'public' in item"

- name: Create secret keys
  template:
    src: key.j2
    dest: "{{ item.secret.path | default(x509_certificate_dir + '/' + item.name + '.key') }}"
    owner: "{{ item.secret.owner | default(x509_certificate_default_owner) }}"
    group: "{{ item.secret.group | default(x509_certificate_default_group) }}"
    mode: "{{ item.secret.mode | default(0400) }}"
    validate: "{{ x509_certificate_validate_command_secret[x509_certificate_validate_command] }}"
  no_log: "{% if x509_certificate_debug_log %}no{% else %}yes{% endif %}"
  with_items: "{{ x509_certificate_present }}"
  when:
    - "'secret' in item"

- name: Remove public keys
  file:
    path: "{{ item.public.path | default(x509_certificate_present + '/' + item.name + '.pub') }}"
    state: absent
  no_log: "{% if x509_certificate_debug_log %}no{% else %}yes{% endif %}"
  with_items: "{{ x509_certificate_absent }}"
  when:
    - "'public' in item"

- name: Remove secret keys
  file:
    path: "{{ item.secret.path | default(x509_certificate_present + '/' + item.name + '.pub') }}"
    state: absent
  no_log: "{% if x509_certificate_debug_log %}no{% else %}yes{% endif %}"
  with_items: "{{ x509_certificate_absent }}"
  when:
    - "'secret' in item"
